generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username         String     @unique
  name             String?    @db.VarChar(35)
  email            String     @unique
  password         String
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  deletedAt        DateTime?
  isPrivate        Boolean    @default(false)
  commentsCount    Int        @default(0)
  likesCount       Int        @default(0)
  retweetsCount    Int        @default(0)
  profilePicture   String?
  followers        Follow[]   @relation("followers")
  follows          Follow[]   @relation("follows")
  receivedMessages Message[]  @relation("ReceivedMessages")
  sentMessages     Message[]  @relation("SentMessages")
  posts            Post[]
  reactions        Reaction[]
}

model Follow {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  followerId String    @db.Uuid
  followedId String    @db.Uuid
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  followed   User      @relation("followers", fields: [followedId], references: [id], onDelete: Cascade)
  follower   User      @relation("follows", fields: [followerId], references: [id], onDelete: Cascade)
}

model Post {
  id            String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  authorId      String     @db.Uuid
  content       String     @db.VarChar(240)
  images        String[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  deletedAt     DateTime?
  parentId      String?    @db.Uuid
  commentsCount Int        @default(0)
  likesCount    Int        @default(0)
  retweetsCount Int        @default(0)
  author        User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  parent        Post?      @relation("PostComments", fields: [parentId], references: [id], onDelete: Cascade)
  comments      Post[]     @relation("PostComments")
  reactions     Reaction[]
}

model Reaction {
  id        String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type      ReactionType
  authorId  String       @db.Uuid
  postId    String       @db.Uuid
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  author    User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post      Post         @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([authorId, postId, type])
}

model Message {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String   @db.VarChar(500)
  senderId   String   @db.Uuid
  receiverId String   @db.Uuid
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User     @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId, receiverId])
  @@index([receiverId, senderId])
}

enum ReactionType {
  LIKE
  RETWEET
}
