// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// The generator block runs every time you run `prisma generate`.
// The prisma-client-js is the default generator that builds ts types based on the db models.
// You can find more about generators here: https://www.prisma.io/docs/concepts/components/prisma-schema/generators
generator client {
  provider = "prisma-client-js"
}

// The datasource block specifies the url to your DBMS.
// You only need to set the DATABASE_URL in your environment file.
// You can find more about datasources here: https://www.prisma.io/docs/concepts/components/prisma-schema/data-sources
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  username       String  @unique // Unique constraint
  name           String? @db.VarChar(35) // Limit display name to 35 characters
  email          String  @unique // Unique constraint
  password       String
  isPrivate      Boolean @default(false)
  profilePicture String? // S3 key for profile picture

  // Counter fields for performance optimization
  likesCount    Int @default(0)
  retweetsCount Int @default(0)
  commentsCount Int @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  posts     Post[]
  reactions Reaction[] // A user can have many reactions
  follows   Follow[]   @relation(name: "follows")
  followers Follow[]   @relation(name: "followers")
}

model Follow {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  followerId String @db.Uuid()
  followedId String @db.Uuid()

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  follower User @relation(name: "follows", fields: [followerId], references: [id], onDelete: Cascade) // One to many
  followed User @relation(name: "followers", fields: [followedId], references: [id], onDelete: Cascade) // One to many
}

model Post {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  authorId String   @db.Uuid // Foreign Key
  content  String   @db.VarChar(240) // Limit the content to 240 characters
  images   String[]
  parentId String?  @db.Uuid // Foreign Key for comments (null for posts, postId for comments)

  // Counter fields for performance optimization
  likesCount    Int @default(0)
  retweetsCount Int @default(0)
  commentsCount Int @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime? // Optional value

  author    User       @relation(fields: [authorId], references: [id], onDelete: Cascade) // One to many
  reactions Reaction[] // A post can have many reactions
  parent    Post?      @relation("PostComments", fields: [parentId], references: [id], onDelete: Cascade) // Parent post for comments
  comments  Post[]     @relation("PostComments") // Comments on this post
}

model Reaction {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid // Primary Key

  type ReactionType // Type of reaction (LIKE, RETWEET)

  authorId String @db.Uuid // Foreign Key - User who made the reaction
  postId   String @db.Uuid // Foreign Key - Post that was reacted to

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Define relationships
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  // Ensure a user can only have one reaction type per post
  @@unique([authorId, postId, type])
}

// Enum to define reaction types
enum ReactionType {
  LIKE
  RETWEET
}
